//
// Copyright (c) 2016-2019 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Contributors:
// Emily Jiang
// Andrew Rouse

[[circuitbreaker]]
== Circuit Breaker

A Circuit Breaker prevents repeated failures, so that dysfunctional services or APIs fail fast. If a service is failing frequently, the circuit breaker opens and no more calls to that service are attempted until a period of time has passed.

There are three circuit states:

* *Closed*: In normal operation, the circuit breaker is closed. The circuit breaker records whether each call is a success or failure and
keeps track of the most recent results in a rolling window. Once the rolling window is full, if the proportion of failures in the rolling window
rises above the `failureRatio`, the circuit breaker will be opened.

* *Open*: When the circuit breaker is open, calls to the service operating under the circuit breaker will fail immediately with a `CircuitBreakerOpenException`.
After a configurable delay, the circuit breaker transitions to half-open state.

* *Half-open*: In half-open state, a configurable number of trial executions of the service are allowed. If any of them fail, the circuit breaker transitions
back to open state. If all the trial executions succeed, the circuit breaker transitions to the closed state.

=== Circuit Breaker Usage

A method or a class can be annotated with `@CircuitBreaker`, which means the method or the methods under the class will have CircuitBreaker policy applied.

==== Configuring when the circuit opens and closes

The following parameters control when the circuit breaker opens and closes.

* `requestVolumeThreshold` controls the size of the rolling window used when the circuit breaker is closed
* `failureRatio` controls the proportion of failures within the rolling window which will cause the circuit breaker to open
* `successThreshold` controls the number of trial calls which are allowed when the circuit breaker is half-open
* `delay` and `delayUnit` control how long the circuit breaker stays open

Circuit breaker state transitions will reset the Circuit Breaker's records. For example, when the circuit breaker transitions to closed a new
rolling failure window is created with the configured requestVolumeThreshold and failureRatio. The circuit state will only be assessed when the rolling window reaches the `requestVolumeThreshold`.

The following example and scenarios demonstrate when the circuit opens.

[source, java]
----
@CircuitBreaker(successThreshold = 10, requestVolumeThreshold = 4, failureRatio=0.5, delay = 1000)
public Connection serviceA() {
   Connection conn = null;
   counterForInvokingServiceA++;
   conn = connectionService();
   return conn;
}
----

* Scenario 1
** Request 1 - success
** Request 2 - failure
** Request 3 - success
** Request 4 - success
** Request 5 - failure
** Request 6 - CircuitBreakerOpenException 

In this scenario, request 5 will trigger the circuit to open because out of the last four requests (the `requestVolumeThreshold`), two failed
which reaches the `failureRatio` of `0.5`. Request 6 will therefore hit the `CircuitBreakerOpenException`.

* Scenario 2
** Request 1 - success
** Request 2 - failure
** Request 3 - failure
** Request 4 - success
** Request 5 - CircuitBreakerOpenException

In this scenario, request 4 will cause the circuit to open. Request 5 will hit the `CircuitBreakerOpenException`.
Note that request 3 does not cause the circuit to open because the rolling window has not yet reached the `requestVolumeThreshold`.

==== Configuring which exceptions are considered a failure

The `failOn` and `skipOn` parameters are used to define which exceptions are considered failures for the purpose of deciding whether the circuit breaker should open.

When a method returns a result, the following rules are applied to determine whether the result is a success or a failure:

* If the method does not throw a `Throwable`, it is considered a success
* Otherwise, if the thrown object is assignable to any value in the `skipOn` parameter, is is considered a success
* Otherwise, if the thrown object is assignable to any value in the `failOn` parameter, it is considered a failure
* Otherwise it is considered a success

If a method throws a `Throwable` which is not a subclass of either `Error` or `Exception`, non-portable behavior results.

In the following example, all exceptions assignable to `ExceptionA` and `ExceptionB`, except the ones assignable to `ExeptionBSub` will be considered failures. `ExceptionBSub` and all other exceptions will be considered successes.

[source, java]
----
@CircuitBreaker(failOn = {ExceptionA.class, ExceptionB.class}, skipOn = ExceptionBSub.class)
public void service() {
    underlyingService();
}
----

=== Interactions with other annotations

The `@CircuitBreaker` annotation can be used together with `@Timeout`, `@Fallback`, `@Asynchronous`, `@Bulkhead` and `@Retry`.

If `@Fallback` is used with `@CircuitBreaker`, the fallback method or handler will be invoked if a `CircuitBreakerOpenException` is thrown.

If `@Retry` is used with `@CircuitBreaker`, each retry attempt is processed by the circuit breaker and recorded as either a success or a failure. If a `CircuitBreakerOpenException` is thrown, the execution may be retried, depending on how the `@Retry` is configured.

If `@Bulkhead` is used with `@Circuitbreaker`, the circuit breaker is checked before attempting to enter the bulkhead. If attempting to enter the bulkhead results in a `BulkheadException`, this may be counted as a failure, depending on the value of the circuit breaker `failOn` attribute.
