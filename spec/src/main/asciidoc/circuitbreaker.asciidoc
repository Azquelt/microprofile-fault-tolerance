//
// Copyright (c) 2016-2018 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Contributors:
// Emily Jiang
// Andrew Rouse

[[circuitbreaker]]
== Circuit Breaker

A Circuit Breaker prevents repeated failures, so that dysfunctional services or APIs fail fast.
There are three circuit states:

* Closed: In normal operation, the circuit is closed. If a failure occurs, the Circuit Breaker records the event. In closed 
state the requestVolumeThreshold and failureRatio parameters may be configured in order to specify the conditions under which the breaker
will transition the circuit to open. If the failure conditions are met, the circuit will be opened.

* Open: When the circuit is open, calls to the service operating under the circuit breaker will fail immediately. A delay may be configured
for the Circuit Breaker. After the specified delay, the circuit transitions to half-open state.

* Half-open: In half-open state, trial executions of the service are allowed. By default one trial call to the service is permitted. If the call fails, 
the circuit will return to open state. The successThreshold parameter allows the configuration of the number of trial executions that must
succeed before the circuit can be closed. After the specified number of successful executions, the circuit will be closed. If a failure occurs
before the successThreshold is reached the circuit will transition to open. 

Note that circuit state transitions will reset the Circuit Breaker's records. For example, when the circuit transitions to closed a new
rolling failure window is created with the configured requestVolumeThreshold and failureRatio. The circuit state will only be assessed when the rolling window reaches the `requestVolumeThreshold`. 
 
[source, java]
----
@CircuitBreaker(successThreshold = 10, requestVolumeThreshold = 4, failureRatio=0.5, delay = 1000)
public Connection serviceA() {
   Connection conn = null;
   counterForInvokingServiceA++;
   conn = connectionService();
   return conn;
}
----
Below are a couple scenarios to demonstrate when the circuit opens for the above code snippet.
* Scenario 1
     Request 1 - success
     Request 2 - failure
     Request 3 - failure
     Request 4 - success
     Request 5 - CircuitOpenException

The Request 4 will trigger the circuit to open. The Request 5 will hit the exception.

* Scenario 2
     Request 1 - success
     Request 2 - failure
     Request 3 - success
     Request 4 - success
     Request 5 - failure
     Request 6 - CircuitOpenException

The Request 5 will trigger the circuit to open. The Request 6 will hit the exception.

=== Circuit Breaker Usage

A method or a class can be annotated with `@CircuitBreaker`, which means the method or the methods under the class will have CircuitBreaker policy applied.

[source, java]
----
@CircuitBreaker(successThreshold = 10, requestVolumeThreshold = 4, failureRatio=0.75, delay = 1000)
public Connection serviceA() {
   Connection conn = null;
   counterForInvokingServiceA++;
   conn = connectionService();
   return conn;
}
----

The above code-snippet means the method serviceA applies the `CircuitBreaker` policy,
which is to open the circuit once 3 (4x0.75) failures occur among the rolling window of 4 consecutive invocation.
The circuit will stay open for 1000ms and then back to half open.
After 10 consecutive successful invocations, the circuit will be back to close again.

When a circuit is open, A `CircuitBreakerOpenException` must be thrown.
The `@CircuitBreaker` annotation can be used together with `@Timeout`, `@Fallback`, `@Asynchronous`, `@Bulkhead` and `@Retry`.

If `@Fallback` is used with `@CircuitBreaker`, the fallback method or handler will be invoked if a `CircuitBreakerOpenException` is thrown.

If `@Retry` is used with `@CircuitBreaker`, each retry attempt is processed by the circuit breaker and recorded as either a success or a failure. If a `CircuitBreakerOpenException` is thrown, the execution may be retried, depending on how the `@Retry` is configured.

If `@Bulkhead` is used with `@Circuitbreaker`, the circuit breaker is checked before attempting to enter the bulkhead. If attempting to enter the bulkhead results in a `BulkheadException`, this may be counted as a failure, depending on the value of the circuit breaker `failOn` attribute.
