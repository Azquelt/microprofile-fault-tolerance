//
// Copyright (c) 2016-2017 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Contributors:
// John D. Ament
// Emily Jiang

[[fallback]]
== Fallback
Fallback method is invoked when the method with @Fallback annotation completed exceptionally.

Fallback annotation can be used on its own or together with other Fault Tolerance annotations.

For a Retry, Fallback is handled any time the Retry would exceed its maximum number of attempts.

For a CircuitBreaker, it is invoked any time the method invocation fails.
When the Circuit is open, the Fallback is always invoked.

=== Fallback usage

A method can be annotated with `@Fallback`, which means the method will have Fallback policy applied.
There are two ways to specify fallback:

* Specify a FallbackHandler class
* Specify the fallbackMethod

==== Specify a FallbackHandler class

If a FallbackHandler is registered for a method returning a different type than the FallbackHandler would return, then the container should treat as an error and deployment fails.

FallbackHandlers are meant to be CDI managed, and should follow the life cycle of the scope of the bean.

[source, java]
----

    @Retry(maxRetries = 1)
    @Fallback(StringFallbackHandler.class)
    public String serviceA() {
        counterForInvokingServiceA++;
        return nameService();
    }

----
The above code snippet means when the method failed and retry reaches its maximum retry, the fallback operation will be performed.
The method `StringFallbackHandler.handle(ExecutionContext context)` will be invoked.
The return type of `StringFallbackHandler.handle(ExecutionContext context)` must be `String`.
Otherwise, the `FaultToleranceDefinitionException` exception will be thrown.


==== Specify the fallbackMethod

This is used to specify that a named method should be called if a fallback is required.

[source, java]
----

    @Retry(maxRetries = 2)
    @Fallback(fallbackMethod= "fallbackForServiceB")
    public String serviceB() {
        counterForInvokingServiceB++;
       return nameService();
    }

    private String fallbackForServiceB() {
        return "myFallback";
    }

----

The above code snippet means when the method failed and retry reaches its maximum retry, the fallback operation will be performed.
The method `fallbackForServiceB` will be invoked.

When `fallbackMethod` is used a `FaultToleranceDefinitionException` will be thrown if any of the following constraints are not met:

* The named fallback method must be on the same class, a superclass or an implemented interface of the class which declares the annotated method
* The named fallback method must have the same parameter types as the annotated method (after resolving any type variables)
* The named fallback method must have the same return type as the annotated method (after resolving any type variables)
* The named fallback method must be accessible from the class which declares the annotated method

The parameter `value` and `fallbackMethod` on `@Fallback` cannot be specified at the same time.
Otherwise, the `FaultToleranceDefinitionException` exception will be thrown.

The fallback should be triggered when an exception occurs.
For instance, `BulkheadException`, `CircuitBreakerOpenException`, `TimeoutException` should trigger the fallback.
