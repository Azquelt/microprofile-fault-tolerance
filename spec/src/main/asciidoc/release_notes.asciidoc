//
// Copyright (c) 2016-2017 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Contributors:
// Emily Jiang

[[release_notes_11]]
== Release Notes for MicroProfile Fault Tolerance 1.1

The following changes occurred in the 1.1 release, compared to 1.0

A full list of changes may be found on the link:https://github.com/eclipse/microprofile-fault-tolerance/milestone/3[MicroProfile Fault Tolerance 1.1 Milestone]

=== API/SPI Changes

- The `ExecutionContext` interface has been extended with a `getFailure` method that returns the execution failure(link:https://github.com/eclipse/microprofile-fault-tolerance/issues/224[#224]).

=== Functional Changes

- Implementations must implement the new method of `ExecutionContext.getFailure()`(link:https://github.com/eclipse/microprofile-fault-tolerance/issues/224[#224]).
- Added metrics status automatically for FT (link:https://github.com/eclipse/microprofile-fault-tolerance/issues/234[#234])
- Disable individual Fault Tolerance annotation using external config (link:https://github.com/eclipse/microprofile-fault-tolerance/issues/109[#109])
- Define priority when multiple properties declared (link: https://github.com/eclipse/microprofile-fault-tolerance/issues/278[#278])

=== Specification Changes

- Implementations must implement the new method of `ExecutionContext.getFailure()`(link:https://github.com/eclipse/microprofile-fault-tolerance/issues/224[#224]).
- Added metrics status automatically for FT (link:https://github.com/eclipse/microprofile-fault-tolerance/issues/234[#234])
- Disable individual Fault Tolerance annotation using external config (link:https://github.com/eclipse/microprofile-fault-tolerance/issues/109[#109])
- Define priority when multiple properties declared (link: https://github.com/eclipse/microprofile-fault-tolerance/issues/278[#278])
- Clarify fallback (link:https://github.com/eclipse/microprofile-fault-tolerance/issues/177[#177])

=== Other changes
- Bulkhead TCK changes (link:https://github.com/eclipse/microprofile-fault-tolerance/issues/227[#227])
- Add standalone async test (link:https://github.com/eclipse/microprofile-fault-tolerance/issues/194[#194])
- Add more configuration test (link:https://github.com/eclipse/microprofile-fault-tolerance/issues/182[#182])
- Circuit Breaker Rolling window behaviour test (link:https://github.com/eclipse/microprofile-fault-tolerance/issues/197[#197])
- Improve Bulkhead test (link:https://github.com/eclipse/microprofile-fault-tolerance/issues/198[#198])

== Release Notes for MicroProfile Fault Tolerance 2.0

This release is a major release of Fault Tolerance. The reason for increasing the release version to 2.0 is that this release upgrades its CDI dependency from CDI 1.2 to CDI 2.0, in order to use the new features introduced by CDI 2.0. Therefore, this specification is not compatible with Java EE7 but is compatible with Java EE8. Other than this, there are no backward incompatible changes introduced in this specification.

The following changes occurred in the 2.0 release, compared to 1.1.


A full list of changes may be found on the link:https://github.com/eclipse/microprofile-fault-tolerance/milestone/5[MicroProfile Fault Tolerance 2.0 Milestone]

=== API/SPI Changes

- Add support of the CompletionStage return type when annotated with @Asynchronous (link:https://github.com/eclipse/microprofile-fault-tolerance/issues/110[#110]).

=== Functional Changes

- Specify the invocation sequence of MicroProfile Fault Tolerance annotations when used together (link:https://github.com/eclipse/microprofile-fault-tolerance/issues/291[#291])
- Clarify how the Fault Tolerance annotations interact with other application defined interceptors (link:https://github.com/eclipse/microprofile-fault-tolerance/issues/313[#313])


=== Specification Changes

- Clarify whether other Fault Tolerance functionalities will be triggered on an exceptional returned Future (link:https://github.com/eclipse/microprofile-fault-tolerance/issues/246[#246]).
- Specify the sequence of MicroProfile Fault Tolerance annotations when used together (link:https://github.com/eclipse/microprofile-fault-tolerance/issues/291[#291])
- Clarify how the Fault Tolerance annotations interact with other application defined interceptors (link:https://github.com/eclipse/microprofile-fault-tolerance/issues/313[#313])

=== Other changes
- Clarify failOn() on CircuitBreaker and Fallback (link:https://github.com/eclipse/microprofile-fault-tolerance/issues/240[#240])
- Circuit Breaker - clarify how requestVolumeThreshold() and rolling window work (link:https://github.com/eclipse/microprofile-fault-tolerance/issues/342[#342])
- other smaller fixes (link:https://github.com/eclipse/microprofile-fault-tolerance/issues/341[#341]) (link:https://github.com/eclipse/microprofile-fault-tolerance/issues/252[#252]) (link:https://github.com/eclipse/microprofile-fault-tolerance/issues/306[#306]) 


